// Code generated by mockery v2.15.0. DO NOT EDIT.

package pokemontyperepositorymock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "github.com/winartodev/go-pokedex/entity"
)

// PokemonTypeRepositoryItf is an autogenerated mock type for the PokemonTypeRepositoryItf type
type PokemonTypeRepositoryItf struct {
	mock.Mock
}

// CreatePokemonTypeDB provides a mock function with given fields: ctx, data
func (_m *PokemonTypeRepositoryItf) CreatePokemonTypeDB(ctx context.Context, data entity.PokemonType) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.PokemonType) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePokemonTypeByIDDB provides a mock function with given fields: ctx, id
func (_m *PokemonTypeRepositoryItf) DeletePokemonTypeByIDDB(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePokemonTypeByPokemonIDDB provides a mock function with given fields: ctx, pokemonID
func (_m *PokemonTypeRepositoryItf) DeletePokemonTypeByPokemonIDDB(ctx context.Context, pokemonID int64) error {
	ret := _m.Called(ctx, pokemonID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, pokemonID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPokemonTypeByPokemonIDDB provides a mock function with given fields: ctx, pokemonID
func (_m *PokemonTypeRepositoryItf) GetPokemonTypeByPokemonIDDB(ctx context.Context, pokemonID int64) ([]entity.PokemonType, error) {
	ret := _m.Called(ctx, pokemonID)

	var r0 []entity.PokemonType
	if rf, ok := ret.Get(0).(func(context.Context, int64) []entity.PokemonType); ok {
		r0 = rf(ctx, pokemonID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.PokemonType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, pokemonID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePokemonTypeDB provides a mock function with given fields: ctx, id, data
func (_m *PokemonTypeRepositoryItf) UpdatePokemonTypeDB(ctx context.Context, id int64, data entity.PokemonType) error {
	ret := _m.Called(ctx, id, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, entity.PokemonType) error); ok {
		r0 = rf(ctx, id, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPokemonTypeRepositoryItf interface {
	mock.TestingT
	Cleanup(func())
}

// NewPokemonTypeRepositoryItf creates a new instance of PokemonTypeRepositoryItf. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPokemonTypeRepositoryItf(t mockConstructorTestingTNewPokemonTypeRepositoryItf) *PokemonTypeRepositoryItf {
	mock := &PokemonTypeRepositoryItf{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
