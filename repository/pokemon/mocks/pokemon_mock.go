// Code generated by mockery v2.15.0. DO NOT EDIT.

package pokemonrepositorymock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "github.com/winartodev/go-pokedex/entity"
)

// PokemonRepositoryItf is an autogenerated mock type for the PokemonRepositoryItf type
type PokemonRepositoryItf struct {
	mock.Mock
}

// CreatePokemonDB provides a mock function with given fields: ctx, data
func (_m *PokemonRepositoryItf) CreatePokemonDB(ctx context.Context, data entity.PokemonDB) (int64, error) {
	ret := _m.Called(ctx, data)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, entity.PokemonDB) int64); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.PokemonDB) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePokemonByIDDB provides a mock function with given fields: ctx, id
func (_m *PokemonRepositoryItf) DeletePokemonByIDDB(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllPokemonByFilterDB provides a mock function with given fields: ctx, filter
func (_m *PokemonRepositoryItf) GetAllPokemonByFilterDB(ctx context.Context, filter map[string]string) ([]entity.PokemonDB, error) {
	ret := _m.Called(ctx, filter)

	var r0 []entity.PokemonDB
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) []entity.PokemonDB); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.PokemonDB)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPokemonDB provides a mock function with given fields: ctx
func (_m *PokemonRepositoryItf) GetAllPokemonDB(ctx context.Context) ([]entity.PokemonDB, error) {
	ret := _m.Called(ctx)

	var r0 []entity.PokemonDB
	if rf, ok := ret.Get(0).(func(context.Context) []entity.PokemonDB); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.PokemonDB)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPokemonByIDDB provides a mock function with given fields: ctx, id
func (_m *PokemonRepositoryItf) GetPokemonByIDDB(ctx context.Context, id int64) (entity.PokemonDB, error) {
	ret := _m.Called(ctx, id)

	var r0 entity.PokemonDB
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.PokemonDB); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.PokemonDB)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePokemonDB provides a mock function with given fields: ctx, id, data
func (_m *PokemonRepositoryItf) UpdatePokemonDB(ctx context.Context, id int64, data entity.PokemonDB) error {
	ret := _m.Called(ctx, id, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, entity.PokemonDB) error); ok {
		r0 = rf(ctx, id, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPokemonRepositoryItf interface {
	mock.TestingT
	Cleanup(func())
}

// NewPokemonRepositoryItf creates a new instance of PokemonRepositoryItf. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPokemonRepositoryItf(t mockConstructorTestingTNewPokemonRepositoryItf) *PokemonRepositoryItf {
	mock := &PokemonRepositoryItf{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
