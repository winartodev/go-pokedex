// Code generated by mockery v2.15.0. DO NOT EDIT.

package userrepositorymock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "github.com/winartodev/go-pokedex/entity"
)

// UserRepositoryItf is an autogenerated mock type for the UserRepositoryItf type
type UserRepositoryItf struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, username, email, password, role
func (_m *UserRepositoryItf) CreateUser(ctx context.Context, username string, email string, password string, role int64) (int64, error) {
	ret := _m.Called(ctx, username, email, password, role)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int64) int64); ok {
		r0 = rf(ctx, username, email, password, role)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, int64) error); ok {
		r1 = rf(ctx, username, email, password, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *UserRepositoryItf) GetUserByUsername(ctx context.Context, username string) (entity.User, error) {
	ret := _m.Called(ctx, username)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserRepositoryItf interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepositoryItf creates a new instance of UserRepositoryItf. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepositoryItf(t mockConstructorTestingTNewUserRepositoryItf) *UserRepositoryItf {
	mock := &UserRepositoryItf{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
