// Code generated by mockery v2.15.0. DO NOT EDIT.

package typesrepositorymock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "github.com/winartodev/go-pokedex/entity"
)

// TypeRepositoryItf is an autogenerated mock type for the TypeRepositoryItf type
type TypeRepositoryItf struct {
	mock.Mock
}

// CreateTypeDB provides a mock function with given fields: ctx, data
func (_m *TypeRepositoryItf) CreateTypeDB(ctx context.Context, data entity.Type) (int64, error) {
	ret := _m.Called(ctx, data)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, entity.Type) int64); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.Type) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GeTypeByIDDB provides a mock function with given fields: ctx, id
func (_m *TypeRepositoryItf) GeTypeByIDDB(ctx context.Context, id int64) (entity.Type, error) {
	ret := _m.Called(ctx, id)

	var r0 entity.Type
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.Type); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.Type)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTypeDB provides a mock function with given fields: ctx
func (_m *TypeRepositoryItf) GetAllTypeDB(ctx context.Context) ([]entity.Type, error) {
	ret := _m.Called(ctx)

	var r0 []entity.Type
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Type); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Type)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTypeDB provides a mock function with given fields: ctx, id, data
func (_m *TypeRepositoryItf) UpdateTypeDB(ctx context.Context, id int64, data entity.Type) error {
	ret := _m.Called(ctx, id, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, entity.Type) error); ok {
		r0 = rf(ctx, id, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTypeRepositoryItf interface {
	mock.TestingT
	Cleanup(func())
}

// NewTypeRepositoryItf creates a new instance of TypeRepositoryItf. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTypeRepositoryItf(t mockConstructorTestingTNewTypeRepositoryItf) *TypeRepositoryItf {
	mock := &TypeRepositoryItf{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
